---
openapi: 3.0.1

info:
  title: Dealership API
  description: Random Description
  version: 0.1.0

servers:
  - url: http://localhost:8000/

security: []

paths:
  /cars/:
    get:
      tags:
        - cars
      summary: Gets all cars
      operationId: GetCars
      responses:
        200:
          description: JSON array of car objects
          content:
            application/json:
              schema:
                type: object
                properties:
                  details:
                    $ref: "#/components/schemas/Details"
                  output:
                    $ref: "#/components/schemas/Car"
        404:
          description: Failed POST request
          $ref: "#/components/responses/NotFound"

    post:
      tags:
        - cars
      summary: Create car object
      operationId: CreateCar
      requestBody:
        $ref: "#/components/requestBodies/CarBodyRequest"
      responses:
        201:
          description: JSON array of car objects
          content:
            application/json:
              schema:
                type: object
                properties:
                  details:
                    $ref: "#/components/schemas/Details"
                  output:
                    $ref: "#/components/schemas/Car"
        404:
          description: Failed POST request
          $ref: "#/components/responses/NotFound"

  /cars/{id}/:
    get:
      tags:
        - cars
      summary: Returns a car object by id
      operationId: GetCarByID
      parameters:
        - name: id
          in: path
          description: car id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: JSON array of car objects
          content:
            application/json:
              schema:
                type: object
                properties:
                  details:
                    $ref: "#/components/schemas/Details"
                  output:
                    $ref: "#/components/schemas/Car"
        404:
          description: Failed GET request
          $ref: "#/components/responses/NotFound"

    put:
      tags:
        - cars
      summary: Returns an edited car object
      operationId: EditCar
      parameters:
        - name: id
          in: path
          description: car id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/CarBodyRequest"
      responses:
        200:
          description: JSON array of car objects
          content:
            application/json:
              schema:
                type: object
                properties:
                  details:
                    $ref: "#/components/schemas/Details"
                  output:
                    $ref: "#/components/schemas/Car"

        404:
          description: Failed POST request
          $ref: "#/components/responses/NotFound"

  /trucks/:
    get:
      tags:
        - trucks
      summary: Gets all trucks
      operationId: GetTrucks
      responses:
        200:
          description: JSON array of car objects
          content:
            application/json:
              schema:
                type: object
                properties:
                  details:
                    $ref: "#/components/schemas/Details"
                  output:
                    $ref: "#/components/schemas/ArrayOfTrucks"
        404:
          description: Failed GET request
          $ref: "#/components/responses/NotFound"

    post:
      tags:
        - trucks
      summary: Create truck object
      operationId: CreateTruck
      requestBody:
        $ref: "#/components/requestBodies/TruckBodyRequest"
      responses:
        200:
          description: JSON array with truck object
          content:
            application/json:
              schema:
                type: object
                properties:
                  details:
                    $ref: "#/components/schemas/Details"
                  output:
                    $ref: "#/components/schemas/Truck"

        404:
          description: Failed POST request
          $ref: "#/components/responses/NotFound"

  /trucks/{id}/:
    get:
      tags:
        - trucks
      summary: Returns a truck object by id
      operationId: GetTruckByID
      parameters:
        - name: id
          in: path
          description: truck id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: JSON array of truck objects
          content:
            application/json:
              schema:
                type: object
                properties:
                  details:
                    $ref: "#/components/schemas/Details"
                  output:
                    $ref: "#/components/schemas/Truck"

        404:
          description: Failed GET request
          $ref: "#/components/responses/NotFound"

    put:
      tags:
        - "trucks"
      summary: Returns an edited truck object
      operationId: EditCar
      parameters:
        - name: truckID
          in: path
          description: truck id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/TruckBodyRequest"
      responses:
        200:
          description: JSON array of truck objects
          content:
            application/json:
              schema:
                type: object
                properties:
                  details:
                    $ref: "#/components/schemas/Details"
                  output:
                    $ref: "#/components/schemas/Truck"

        404:
          description: Failed PUT request
          $ref: "#/components/responses/NotFound"

components:
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            type: object
            properties:
              details:
                type: string
                description: Human readable error message
                readOnly: true
          example:
            details: HTTP message
            output: error message

  parameters:
    carID:
      name: carID
      in: path
      description: car id
      required: true
      schema:
        type: integer
        format: int64

  requestBodies:
    CarBodyRequest:
      description: request car by ID
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Car"

    TruckBodyRequest:
      description: request truck by ID
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Truck"

  schemas:
    Details:
      type: string
      description: Human readable error message
      readOnly: true

    ArrayOfCars:
      type: array
      items:
        $ref: "#/components/schemas/Car"

    ArrayOfTrucks:
      type: array
      items:
        $ref: "#/components/schemas/Truck"

    Car:
      type: object
      required: [brand, model, horse_power, build_year]
      properties:
        brand:
          type: string
        model:
          type: string
        horse_power:
          type: integer
        build_year:
          type: string
        euro_category:
          type: integer
        vehicle_type:
          type: integer
        price:
          type: integer

    Truck:
      type: object
      required: [brand, model, horse_power, build_year]
      properties:
        brand:
          type: string
        model:
          type: string
        horse_power:
          type: integer
        build_year:
          type: string
        max_load:
          type: integer
        vehicle_type:
          type: integer
        price:
          type: integer
        created_time:
          type: string
          readOnly: true

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
